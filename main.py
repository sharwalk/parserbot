import nest_asyncio
nest_asyncio.apply()

import asyncio
import sys
from concurrent.futures import ThreadPoolExecutor
from functools import partial

if sys.platform.startswith('win'):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import aiohttp
from bs4 import BeautifulSoup
import g4f
from telegram import Bot, InputMediaPhoto
async def get_news():
    url = "https://stopgame.ru/news"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            content = await response.text()

    soup = BeautifulSoup(content, 'html.parser')
    news_cards = soup.find_all('div', class_='_card_1vlem_1')

    news_list = []
    tasks = []

    for card in news_cards[:5]:
        original_title = card.find('a', class_='_title_1vlem_60').text.strip()
        link = "https://stopgame.ru" + card.find('a', class_='_title_1vlem_60')['href']
    
        image_tag = card.find('img', class_='_image_1vlem_20 img') or card.find('img')
        image = image_tag['src'] if image_tag else "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    
        tasks.append(asyncio.create_task(process_news(original_title, link, image)))

    news_list = await asyncio.gather(*tasks)
    return news_list

async def process_news(original_title, link, image):
    news_content = await get_news_content(link)
    return {
        'original_title': original_title,
        'link': link,
        'image': image,
        'content': news_content
    }

async def get_news_content(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            content = await response.text()

    soup = BeautifulSoup(content, 'html.parser')

    paragraphs = soup.find_all('p', class_='_text_12po9_111')
    quotes = soup.find_all('blockquote')

    content = "\n\n".join([p.text.strip() for p in paragraphs])
    content += "\n\n" + "\n\n".join([f"–¶–∏—Ç–∞—Ç–∞: {q.text.strip()}" for q in quotes])

    return content.strip()

async def send_to_telegram(bot, chat_id, news):
    tasks = []
    for item in news:
        caption = f"‚ú® *{item['original_title']}*\n\n"
        caption += f"üì∞ {item['content']}\n\n"
        caption += f"[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({item['link']})\n\n"
        caption += "üîó –ë–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π –∏ –æ–±–∑–æ—Ä–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É –∞–≤—Ç–æ—Ä–∞ –ú–∞–∫—Å–∏–º –ö—É–∑—å–º–∏–Ω –Ω–∞ –±–∏—Ä–∂–µ —Ç–µ–∫—Å—Ç–æ–≤ –ê–¥–≤–µ–≥–æ: https://advego.com/shop/find/?so=1&a=MaksimKuzmin3"
        
        caption += "\n\n---\n\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏
        
        tasks.append(send_single_news(bot, chat_id, item['image'], caption))
    
    await asyncio.gather(*tasks)

async def send_single_news(bot, chat_id, image, caption):
    try:
        await bot.send_photo(chat_id=chat_id, photo=image, caption=caption, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await bot.send_message(chat_id=chat_id, text=caption, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def display_and_select_news(news):
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    for i, item in enumerate(news, 1):
        print(f"{i}. {item['original_title']}")
    
    while True:
        try:
            choice = int(input(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (1-{len(news)}): "))
            if 1 <= choice <= len(news):
                return [news[choice - 1]]
            else:
                print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(news)}.")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def main():
    from config import BOT_TOKEN, CHAT_ID
    bot = Bot(token=BOT_TOKEN)
    news = await get_news()
    
    if not news:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞.")
        return
    
    selected_news = display_and_select_news(news)
    
    await send_to_telegram(bot, CHAT_ID, selected_news)
    print("–í—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram")

import logging

"""
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞ stopgame.ru, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é GPT
–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram –∫–∞–Ω–∞–ª. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
"""

if __name__ == "__main__":
    asyncio.run(main())
